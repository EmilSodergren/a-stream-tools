-------------------------------------------------------------------------------
--                                                                           --
--  Copyright 2015 Per Sandberg <per.s.sandberg@bahnhof.se>                  --
--                                                                           --
--  Permission is hereby granted, free of charge, to any person obtaining a  --
--  copy of this software and associated documentation files                 --
--  (the "Software"), to deal in the Software without restriction, including --
--  without limitation the rights to use, copy, modify, merge, publish,      --
--  distribute, sublicense, and / or sell copies of the Software, and to     --
--  permit persons to whom the Software is furnished to do so, subject to    --
--  the following conditions :                                               --
--                                                                           --
--  The above copyright notice and this permission notice shall be included  --
--  in all copies or substantial portions of the Software.                   --
--                                                                           --
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  --
--  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               --
--  MERCHANTABILITY,                                                         --
--  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL  --
--  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR     --
--  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,    --
--  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR    --
--  OTHER DEALINGS IN THE SOFTWARE.                                          --
-------------------------------------------------------------------------------

project Stream_Tools is
   Version := "1.0.4";
   type Target_type is ("native","arm-eabi","arm-linux-gnueabihf");
   type Library_Type_Kind is ("static","relocatable");
   type Boolean is ("True", "False");

   Target : Target_type := external ("TARGET","native");

   case Target is
      when "native" =>
         null;
      when others =>
         for Target use Target;
   end case;

   Library_Type : Library_Type_Kind  := external ("LIBRARY_TYPE","static");

   for Languages use ("Ada", "Makefile", "Text");

   for Source_Dirs use (".", "src");
   for Object_Dir use ".obj/" & Project'Target & "/" & project'Name & "/" & Library_Type;
   for Library_Dir use "lib/"& Project'Target;
   for Library_Name use "stream_tools";

   for Library_Version use project'Shared_Library_Prefix &
                           project'Library_Name &
                           project'Shared_Library_Suffix & "." & Version;

   for Library_Kind use Library_Type;
   case Library_Type is
      when "relocatable" =>
         for Library_Interface use
           ("stream_tools",
            "stream_tools.bufferd_streams",
            "stream_tools.timed_streams",
            "stream_tools.timed_streams.input",
            "stream_tools.timed_streams.output");

      when "static" => null;
   end case;


   package Builder is
      for Default_Switches ("Ada") use ("-s","-j0");
   end Builder;

   package Ide is
      for Documentation_Dir use "doc";
      for Vcs_Kind use "Git";
      case Target is
        when "native" =>
            null;
         when others =>
            for gnatlist use project'Target & "-gnatls";
      end case;
   end Ide;

   package Make is
      for Makefile use "Makefile";
   end Make;



   package Pretty_Printer is
      for Default_Switches ("ada") use ("-c3", "-c4", "-c5", "-M128", "-N", "--no-separate-loop-then");
   end Pretty_Printer;


   package Compiler is
      for Default_Switches ("Ada") use ("-gnat12",
                                        "-gnateE", --   Generate extra information in exception messages
                                        "-gnatf",--    Full errors. Verbose details, all undefined references
                                        "-gnatq",  --    Don't quit, try semantics, even if parse errors
                                        "-gnatQ",  --  Don't quit, write ali/tree file even if compile errors
                                        "-gnatwa", -- Turn on most Warnings
                                        "-gnaty3", --  check indentation
                                        "-gnatya", --    check attribute casing
                                        "-gnatyA", --    check array attribute indexes
                                        "-gnatyb", --    check no blanks at end of lines
                                        "-gnatyc", --    check comment format (two spaces)
                                        "-gnatyd", --    check no DOS line terminators
                                        "-gnatyf", --    check no form feeds/vertical tabs in source
                                        "-gnatyg", --    check standard GNAT style rules
                                        "-gnatyh", --    check no horizontal tabs in source
                                        "-gnatyi", --    check if-then layout
                                        "-gnatyk", --    check casing rules for keywords
                                        "-gnatyl", --    check reference manual layout
                                        "-gnatyL10", --  check max nest level < nn
                                        "-gnatyn", --    check casing of package Standard identifiers
                                        "-gnatyM256", --  check line length <= nn characters
                                        "-gnatyO", --    check overriding indicators
                                        "-gnatyp", --    check pragma casing
                                        "-gnatyr", --    check casing for identifier references
                                        "-gnatys", --    check separate subprogram specs present
                                        "-gnatyS", --    check separate lines after THEN or ELSE
                                        "-gnatyt", --    check token separation rules
                                        "-gnatyx"); --    check extra parentheses around conditionals
      for Driver ("makefile") use "";
      for Driver ("project file") use "";
      for Driver ("python") use "";
      for Driver("Text") use "";
   end Compiler;

   package Binder is
      for Default_Switches ("Ada") use ("-E");
   end Binder;


   package Gnattest is
      for Harness_Dir use "tests/";
   end Gnattest;

   package Naming is
      for  Implementation_Exceptions ("Makefile") use ("Makefile");
      for Body_Suffix("Text") use ".txt";
      for Implementation_Exceptions("Text") use ("README.md");
      for Body_Suffix ("Makefile") use ".mk";
      for Body_Suffix ("python") use ".py";
      for Spec_Suffix ("Project File") use ".gpr";
   end Naming;

end Stream_Tools;
